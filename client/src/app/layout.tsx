// client/src/app/layout.tsx
import { JetBrains_Mono, Poppins, Roboto, Playfair_Display, Noto_Color_Emoji } from 'next/font/google'
import type { Metadata } from 'next'
import { Geist, Geist_Mono } from 'next/font/google'
import './globals.css'
import Providers from '@/components/providers'

const jetbrains = JetBrains_Mono({
  subsets: ['latin'],
  weight: ['100', '400', '700', '800'],
  variable: '--font-jetbrains-mono',
  fallback: ['var(--font-emoji)', 'monospace'],
  adjustFontFallback: false,
  display: 'swap'
})
const poppins = Poppins({
  subsets: ['latin'],
  weight: ['400', '600', '800'],
  variable: '--font-poppins',
  fallback: ['var(--font-emoji)', 'sans-serif'],
  adjustFontFallback: false,
  display: 'swap'
})
const roboto = Roboto({
  subsets: ['latin'],
  weight: ['400', '700'],
  variable: '--font-roboto',
  display: 'swap',
  fallback: ['var(--font-emoji)', 'sans-serif'],
  adjustFontFallback: false
})
const playfair = Playfair_Display({
  subsets: ['latin'],
  weight: ['400', '700'],
  variable: '--font-playfair',
  fallback: ['var(--font-emoji)', 'serif'],
  adjustFontFallback: false,
  display: 'swap'
})
const emoji = Noto_Color_Emoji({ subsets: ['emoji'], weight: ['400'], variable: '--font-emoji' })

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin']
})

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin']
})

export const metadata: Metadata = {
  title: 'MAIServant',
  description: 'Generated by create next app',
  icons: {
    icon: 'data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 16 16%22><text y=%2214%22 font-size=%2214%22>ðŸ¤µ</text></svg>'
  }
}

export default function RootLayout({ children }: Readonly<{ children: React.ReactNode }>) {
  return (
    <html
      lang='en'
      className={`${jetbrains.variable} ${poppins.variable} ${roboto.variable} ${playfair.variable} ${emoji.variable}`}
    >
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <Providers>{children}</Providers>
      </body>
    </html>
  )
}
